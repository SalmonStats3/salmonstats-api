openapi: 3.0.0
paths:
  /v1/results:
    post:
      operationId: 登録
      summary: ''
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Results'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadStatuses'
        '400':
          description: ''
      tags:
        - リザルト
info:
  title: Salmon Stats NEXT WAVE API Documents
  description: ''
  contact: {}
tags: []
servers: []
components:
  schemas:
    PaginatedDto:
      type: object
      properties:
        total:
          type: integer
          description: 総数
        limit:
          type: integer
          description: 上限数
        offset:
          type: integer
          description: オフセット
      required:
        - total
        - limit
        - offset
    Badge:
      type: object
      properties:
        id:
          type: number
      required:
        - id
    TextColor:
      type: object
      properties:
        r:
          type: number
        g:
          type: number
        b:
          type: number
        a:
          type: number
      required:
        - r
        - g
        - b
        - a
    Image:
      type: object
      properties:
        url:
          type: string
      required:
        - url
    Background:
      type: object
      properties:
        text_color:
          $ref: '#/components/schemas/TextColor'
        image:
          $ref: '#/components/schemas/Image'
        id:
          type: number
      required:
        - text_color
        - image
        - id
    NamePlate:
      type: object
      properties:
        badges:
          $ref: '#/components/schemas/Badge'
        background:
          $ref: '#/components/schemas/Background'
      required:
        - badges
        - background
    ImageRef:
      type: object
      properties:
        name:
          type: string
        image:
          $ref: '#/components/schemas/Image'
        id:
          type: number
      required:
        - name
        - image
        - id
    Player:
      type: object
      properties:
        is_player:
          type: string
        byname:
          type: string
        name:
          type: string
        name_id:
          type: number
        nameplate:
          $ref: '#/components/schemas/NamePlate'
        uniform:
          $ref: '#/components/schemas/ImageRef'
        id:
          type: string
        is_myself:
          type: boolean
        species:
          type: string
          enum:
            - INKLING
            - OCTOLING
      required:
        - is_player
        - byname
        - name
        - name_id
        - nameplate
        - uniform
        - id
        - is_myself
        - species
    PlayerResult:
      type: object
      properties:
        player:
          $ref: '#/components/schemas/Player'
        weapons:
          type: array
          items:
            $ref: '#/components/schemas/ImageRef'
        special_weapon:
          $ref: '#/components/schemas/ImageRef'
        defeat_enemy_count:
          type: number
        deliver_count:
          type: number
        golden_assist_count:
          type: number
        golden_deliver_count:
          type: number
        rescue_count:
          type: number
        rescued_count:
          type: number
      required:
        - player
        - weapons
        - defeat_enemy_count
        - deliver_count
        - golden_assist_count
        - golden_deliver_count
        - rescue_count
        - rescued_count
    EnemyResult:
      type: object
      properties:
        defeat_count:
          type: number
        team_defeat_count:
          type: number
        pop_count:
          type: number
        enemy:
          $ref: '#/components/schemas/ImageRef'
      required:
        - defeat_count
        - team_defeat_count
        - pop_count
        - enemy
    Ref:
      type: object
      properties:
        name:
          type: string
        id:
          type: number
      required:
        - name
        - id
    WaveResult:
      type: object
      properties:
        wave_number:
          type: number
        water_level:
          type: number
        event_wave:
          $ref: '#/components/schemas/Ref'
        golden_pop_count:
          type: number
        deliver_norm:
          type: number
        team_deliver_count:
          type: number
        special_weapons:
          type: array
          items:
            $ref: '#/components/schemas/Ref'
      required:
        - wave_number
        - water_level
        - golden_pop_count
        - special_weapons
    BossResult:
      type: object
      properties:
        has_defeat_boss:
          type: boolean
        boss:
          $ref: '#/components/schemas/ImageRef'
      required:
        - has_defeat_boss
        - boss
    Scale:
      type: object
      properties:
        gold:
          type: number
        silver:
          type: number
        bronze:
          type: number
    HistoryDetailId:
      type: object
      properties:
        id:
          type: string
      required:
        - id
    CoopHistoryDetail:
      type: object
      properties:
        typename:
          type: string
        id:
          type: string
        rule:
          type: string
          enum:
            - REGULAR
        my_result:
          $ref: '#/components/schemas/PlayerResult'
        member_results:
          type: array
          items:
            $ref: '#/components/schemas/PlayerResult'
        enemy_results:
          type: array
          items:
            $ref: '#/components/schemas/EnemyResult'
        wave_results:
          type: array
          items:
            $ref: '#/components/schemas/WaveResult'
        resultWave:
          type: number
        played_time:
          type: string
        coop_stage:
          $ref: '#/components/schemas/ImageRef'
        danger_rate:
          type: number
        weapons:
          type: array
          items:
            type: string
        after_grade:
          $ref: '#/components/schemas/Ref'
        scenario_code:
          type: string
        smell_meter:
          type: number
        boss_results:
          $ref: '#/components/schemas/BossResult'
        after_grade_point:
          type: number
        scale:
          $ref: '#/components/schemas/Scale'
        job_point:
          type: number
        job_score:
          type: number
        job_rate:
          type: number
        job_bonus:
          type: number
        next_history_detail:
          $ref: '#/components/schemas/HistoryDetailId'
        previous_history_detail:
          $ref: '#/components/schemas/HistoryDetailId'
      required:
        - typename
        - id
        - rule
        - my_result
        - member_results
        - enemy_results
        - wave_results
        - resultWave
        - played_time
        - coop_stage
        - danger_rate
        - weapons
    Data:
      type: object
      properties:
        coopHistoryDetail:
          $ref: '#/components/schemas/CoopHistoryDetail'
      required:
        - coopHistoryDetail
    SplatNet3:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Data'
      required:
        - data
    Results:
      type: object
      properties:
        results:
          minItems: 1
          maxItems: 50
          description: リザルト
          type: array
          items:
            $ref: '#/components/schemas/SplatNet3'
      required:
        - results
    UploadStatus:
      type: object
      properties:
        salmon_id:
          type: number
          description: リザルトID
        status:
          type: string
          enum:
            - created
            - updated
            - not allowed
      required:
        - salmon_id
        - status
    UploadStatuses:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/UploadStatus'
      required:
        - results

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider          = "postgres"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Result {
  // ID
  id                   String    @id
  // サーモンID
  salmonId             Int       @unique @default(autoincrement()) @map("salmon_id")
  // バイト固有ID(シナリオコードの代わりみたいなもの)
  uuid                 String    @map("uuid")
  // オオモノ出現数
  bossCounts           Int[]     @map("boss_counts")
  // オオモノ討伐数
  bossKillCounts       Int[]     @map("boss_kill_counts")
  // イクラ数
  ikuraNum             Int       @map("ikura_num")
  // 金イクラ数
  goldenIkuraNum       Int       @map("golden_ikura_num")
  // 金イクラ数
  goldenIkuraAssistNum Int       @map("golden_ikura_assist_num")
  // 夜イベントを含むかどうか
  nightLess            Boolean   @map("night_less")
  // キケン度
  dangerRate           Float     @map("danger_rate")
  // 遊んだ時間
  playTime             DateTime  @map("play_time")
  // プレイヤーのID配列
  members              String[]
  // ドウウロコの枚数
  bronze               Int?
  // ギンウロコの枚数
  silver               Int?
  // キンウロコの枚数
  gold                 Int?
  // クリアしたかどうか
  isClear              Boolean   @map("is_clear")
  // 失敗したWAVE
  failureWave          Int?      @map("failure_wave")
  // オカシラシャケを討伐したかどうか
  isBossDefeated       Boolean?  @map("is_boss_defeated")
  // たおしたオカシラシャケのID
  bossId               Int?      @map("boss_id")
  // シナリオコード
  scenarioCode         String?   @map("scenario_code")
  // 作成日
  createdAt            DateTime  @default(now())
  // 更新日
  updatedAt            DateTime  @updatedAt()
  // リレーション
  schedule             Schedule? @relation(fields: [scheduleId], references: [id])
  scheduleId           Int?      @map("schedule_id")
  waves                Wave[]
  players              Player[]

  @@map("results")
}

model Schedule {
  // ユニークID
  id         Int       @id @default(autoincrement()) @map("schedule_id")
  // ステージID
  stageId    Int       @map("stage_id")
  // レアブキID
  rareWeapon Int?      @map("rare_weapon")
  // 支給ブキID
  weaponList Int[]     @map("weapon_list")
  // モード
  mode       String    @default("REGULAR")
  // ルール
  rule       String    @default("REGULAR")
  // 作成日
  createdAt  DateTime  @default(now())
  // 更新日
  updatedAt  DateTime  @updatedAt()
  // 開始時刻
  startTime  DateTime?
  // 終了時刻
  endTime    DateTime?

  results Result[]

  @@unique([startTime, endTime, stageId, weaponList, mode, rule])
  @@map("schedules")
}

model Player {
  // 内部的なID
  id                   Int      @id @default(autoincrement()) @map("id")
  // プレイヤーID
  pid                  String
  // 名前
  name                 String
  // 称号
  byname               String
  // 名前ID
  nameId               String   @map("name_id")
  // バッジ
  badges               Int[]
  // ネームプレート
  nameplate            Int
  // ネームプレート
  textColor            Float[]  @map("text_color")
  // ユニフォーム
  uniform              Int
  // オオモノ討伐数合計
  bossKillCountsTotal  Int      @map("boss_kill_counts_total")
  // オオモノ討伐数
  bossKillCounts       Int[]    @map("boss_kill_counts")
  // 被救助数
  deadCount            Int      @map("dead_count")
  // 救助数
  helpCount            Int      @map("help_count")
  // イクラ数
  ikuraNum             Int      @map("ikura_num")
  // 金イクラ数
  goldenIkuraNum       Int      @map("golden_ikura_num")
  // 金イクラアシスト数
  goldenIkuraAssistNum Int      @map("golden_ikura_assist_num")
  // バイトボーナス
  jobBonus             Int?     @map("job_bonus")
  // バイトレート
  jobRate              Float?   @map("job_rate")
  // バイトスコア
  jobScore             Int?     @map("job_score")
  // クマサンポイント
  kumaPoint            Int?     @map("kuma_point")
  // 称号
  gradeId              Int?     @map("grade_id")
  // 評価レート
  gradePoint           Int?     @map("grade_point")
  // オカシラメーター
  smellMeter           Int?     @map("smell_meter")
  // 種族
  species              String
  // スペシャルID
  specialId            Int?     @map("special_id")
  // スペシャル使用数
  specialCounts        Int[]    @map("special_count")
  // 支給されたブキのリスト
  weaponList           Int[]    @map("weapon_list")
  // 作成日
  createdAt            DateTime @default(now())
  // 更新日
  updatedAt            DateTime @updatedAt()
  /// リレーション
  Result               Result?  @relation(fields: [resultId], references: [id])
  // リザルトID
  resultId             String?  @map("result_id")

  @@unique([resultId, pid])
  @@map("players")
}

model Wave {
  id                Int      @id @default(autoincrement())
  // WAVE数
  waveId            Int      @map("wave_id")
  // イベント
  eventType         Int      @map("event_type")
  // 潮位
  waterLevel        Int      @map("water_level")
  // 金イクラ数
  goldenIkuraNum    Int?     @map("golden_ikura_num")
  // 金イクラドロップ数
  goldenIkuraPopNum Int      @map("golden_ikura_pop_num")
  // 金イクラドロップ数
  quotaNum          Int?     @map("quota_num")
  // クリアしたか
  isClear           Boolean  @map("is_clear")
  // 作成日
  createdAt         DateTime @default(now())
  // 更新日
  updatedAt         DateTime @updatedAt()
  Result            Result?  @relation(fields: [resultId], references: [id])
  resultId          String?  @map("result_id")

  @@map("waves")
}
